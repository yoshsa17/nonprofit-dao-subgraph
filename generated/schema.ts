// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("isIncoming", Value.fromBoolean(false));
    this.set("tokenOrEther", Value.fromBytes(Bytes.empty()));
    this.set("srcOrDst", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("reference", Value.fromString(""));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isIncoming(): boolean {
    let value = this.get("isIncoming");
    return value!.toBoolean();
  }

  set isIncoming(value: boolean) {
    this.set("isIncoming", Value.fromBoolean(value));
  }

  get tokenOrEther(): Bytes {
    let value = this.get("tokenOrEther");
    return value!.toBytes();
  }

  set tokenOrEther(value: Bytes) {
    this.set("tokenOrEther", Value.fromBytes(value));
  }

  get srcOrDst(): Bytes {
    let value = this.get("srcOrDst");
    return value!.toBytes();
  }

  set srcOrDst(value: Bytes) {
    this.set("srcOrDst", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get reference(): string {
    let value = this.get("reference");
    return value!.toString();
  }

  set reference(value: string) {
    this.set("reference", Value.fromString(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenBalance", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenBalance(): BigInt {
    let value = this.get("tokenBalance");
    return value!.toBigInt();
  }

  set tokenBalance(value: BigInt) {
    this.set("tokenBalance", Value.fromBigInt(value));
  }

  get reputation(): Array<string> | null {
    let value = this.get("reputation");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set reputation(value: Array<string> | null) {
    if (!value) {
      this.unset("reputation");
    } else {
      this.set("reputation", Value.fromStringArray(<Array<string>>value));
    }
  }

  get evaluatingLog(): Array<string> | null {
    let value = this.get("evaluatingLog");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set evaluatingLog(value: Array<string> | null) {
    if (!value) {
      this.unset("evaluatingLog");
    } else {
      this.set("evaluatingLog", Value.fromStringArray(<Array<string>>value));
    }
  }

  get votingLog(): Array<string> | null {
    let value = this.get("votingLog");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set votingLog(value: Array<string> | null) {
    if (!value) {
      this.unset("votingLog");
    } else {
      this.set("votingLog", Value.fromStringArray(<Array<string>>value));
    }
  }

  get proposingLog(): Array<string> | null {
    let value = this.get("proposingLog");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set proposingLog(value: Array<string> | null) {
    if (!value) {
      this.unset("proposingLog");
    } else {
      this.set("proposingLog", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class EvaluationRound extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("evaluators", Value.fromString(""));
    this.set("startBlock", Value.fromBigInt(BigInt.zero()));
    this.set("endBlock", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EvaluationRound entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save EvaluationRound entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("EvaluationRound", id.toString(), this);
    }
  }

  static load(id: string): EvaluationRound | null {
    return changetype<EvaluationRound | null>(store.get("EvaluationRound", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get evaluators(): string {
    let value = this.get("evaluators");
    return value!.toString();
  }

  set evaluators(value: string) {
    this.set("evaluators", Value.fromString(value));
  }

  get startBlock(): BigInt {
    let value = this.get("startBlock");
    return value!.toBigInt();
  }

  set startBlock(value: BigInt) {
    this.set("startBlock", Value.fromBigInt(value));
  }

  get endBlock(): BigInt {
    let value = this.get("endBlock");
    return value!.toBigInt();
  }

  set endBlock(value: BigInt) {
    this.set("endBlock", Value.fromBigInt(value));
  }

  get reputations(): Array<string> {
    let value = this.get("reputations");
    return value!.toStringArray();
  }

  set reputations(value: Array<string>) {
    this.set("reputations", Value.fromStringArray(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Reputation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("owner", Value.fromString(""));
    this.set("expirationTime", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Reputation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Reputation entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Reputation", id.toString(), this);
    }
  }

  static load(id: string): Reputation | null {
    return changetype<Reputation | null>(store.get("Reputation", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get evaluator(): string | null {
    let value = this.get("evaluator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set evaluator(value: string | null) {
    if (!value) {
      this.unset("evaluator");
    } else {
      this.set("evaluator", Value.fromString(<string>value));
    }
  }

  get reason(): string | null {
    let value = this.get("reason");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set reason(value: string | null) {
    if (!value) {
      this.unset("reason");
    } else {
      this.set("reason", Value.fromString(<string>value));
    }
  }

  get expirationTime(): BigInt {
    let value = this.get("expirationTime");
    return value!.toBigInt();
  }

  set expirationTime(value: BigInt) {
    this.set("expirationTime", Value.fromBigInt(value));
  }

  get evaluationRound(): string | null {
    let value = this.get("evaluationRound");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set evaluationRound(value: string | null) {
    if (!value) {
      this.unset("evaluationRound");
    } else {
      this.set("evaluationRound", Value.fromString(<string>value));
    }
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Proposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("proposer", Value.fromString(""));
    this.set("description", Value.fromString(""));
    this.set("targets", Value.fromString(""));
    this.set("values", Value.fromBigIntArray(new Array(0)));
    this.set("calldatas", Value.fromBytesArray(new Array(0)));
    this.set("startBlock", Value.fromBigInt(BigInt.zero()));
    this.set("endBlock", Value.fromBigInt(BigInt.zero()));
    this.set("forVotes", Value.fromBigInt(BigInt.zero()));
    this.set("againstVotes", Value.fromBigInt(BigInt.zero()));
    this.set("abstainVotes", Value.fromBigInt(BigInt.zero()));
    this.set("canceled", Value.fromBoolean(false));
    this.set("executed", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Proposal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Proposal entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Proposal", id.toString(), this);
    }
  }

  static load(id: string): Proposal | null {
    return changetype<Proposal | null>(store.get("Proposal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposer(): string {
    let value = this.get("proposer");
    return value!.toString();
  }

  set proposer(value: string) {
    this.set("proposer", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get targets(): string {
    let value = this.get("targets");
    return value!.toString();
  }

  set targets(value: string) {
    this.set("targets", Value.fromString(value));
  }

  get values(): Array<BigInt> {
    let value = this.get("values");
    return value!.toBigIntArray();
  }

  set values(value: Array<BigInt>) {
    this.set("values", Value.fromBigIntArray(value));
  }

  get calldatas(): Array<Bytes> {
    let value = this.get("calldatas");
    return value!.toBytesArray();
  }

  set calldatas(value: Array<Bytes>) {
    this.set("calldatas", Value.fromBytesArray(value));
  }

  get startBlock(): BigInt {
    let value = this.get("startBlock");
    return value!.toBigInt();
  }

  set startBlock(value: BigInt) {
    this.set("startBlock", Value.fromBigInt(value));
  }

  get endBlock(): BigInt {
    let value = this.get("endBlock");
    return value!.toBigInt();
  }

  set endBlock(value: BigInt) {
    this.set("endBlock", Value.fromBigInt(value));
  }

  get forVotes(): BigInt {
    let value = this.get("forVotes");
    return value!.toBigInt();
  }

  set forVotes(value: BigInt) {
    this.set("forVotes", Value.fromBigInt(value));
  }

  get againstVotes(): BigInt {
    let value = this.get("againstVotes");
    return value!.toBigInt();
  }

  set againstVotes(value: BigInt) {
    this.set("againstVotes", Value.fromBigInt(value));
  }

  get abstainVotes(): BigInt {
    let value = this.get("abstainVotes");
    return value!.toBigInt();
  }

  set abstainVotes(value: BigInt) {
    this.set("abstainVotes", Value.fromBigInt(value));
  }

  get canceled(): boolean {
    let value = this.get("canceled");
    return value!.toBoolean();
  }

  set canceled(value: boolean) {
    this.set("canceled", Value.fromBoolean(value));
  }

  get executed(): boolean {
    let value = this.get("executed");
    return value!.toBoolean();
  }

  set executed(value: boolean) {
    this.set("executed", Value.fromBoolean(value));
  }

  get votes(): Array<string> {
    let value = this.get("votes");
    return value!.toStringArray();
  }

  set votes(value: Array<string>) {
    this.set("votes", Value.fromStringArray(value));
  }
}

export class Vote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("voter", Value.fromString(""));
    this.set("proposal", Value.fromString(""));
    this.set("support", Value.fromI32(0));
    this.set("weight", Value.fromBigInt(BigInt.zero()));
    this.set("reason", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Vote entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Vote", id.toString(), this);
    }
  }

  static load(id: string): Vote | null {
    return changetype<Vote | null>(store.get("Vote", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get voter(): string {
    let value = this.get("voter");
    return value!.toString();
  }

  set voter(value: string) {
    this.set("voter", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value!.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get support(): i32 {
    let value = this.get("support");
    return value!.toI32();
  }

  set support(value: i32) {
    this.set("support", Value.fromI32(value));
  }

  get weight(): BigInt {
    let value = this.get("weight");
    return value!.toBigInt();
  }

  set weight(value: BigInt) {
    this.set("weight", Value.fromBigInt(value));
  }

  get reason(): string {
    let value = this.get("reason");
    return value!.toString();
  }

  set reason(value: string) {
    this.set("reason", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
