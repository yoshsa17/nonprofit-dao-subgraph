// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class EtherDeposited extends ethereum.Event {
  get params(): EtherDeposited__Params {
    return new EtherDeposited__Params(this);
  }
}

export class EtherDeposited__Params {
  _event: EtherDeposited;

  constructor(event: EtherDeposited) {
    this._event = event;
  }

  get transactionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get source(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get information(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class EtherSent extends ethereum.Event {
  get params(): EtherSent__Params {
    return new EtherSent__Params(this);
  }
}

export class EtherSent__Params {
  _event: EtherSent;

  constructor(event: EtherSent) {
    this._event = event;
  }

  get transactionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get target(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get information(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class Treasury__getTransactionResultValue0Struct extends ethereum.Tuple {
  get tokenOrEther(): Address {
    return this[0].toAddress();
  }

  get srcOrDst(): Address {
    return this[1].toAddress();
  }

  get isIncoming(): boolean {
    return this[2].toBoolean();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get information(): string {
    return this[4].toString();
  }
}

export class Treasury extends ethereum.SmartContract {
  static bind(address: Address): Treasury {
    return new Treasury("Treasury", address);
  }

  isAcceptableToken(token: Address): boolean {
    let result = super.call(
      "isAcceptableToken",
      "isAcceptableToken(address):(bool)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBoolean();
  }

  try_isAcceptableToken(token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAcceptableToken",
      "isAcceptableToken(address):(bool)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  send(target: Address, amount: BigInt, information: string): boolean {
    let result = super.call("send", "send(address,uint256,string):(bool)", [
      ethereum.Value.fromAddress(target),
      ethereum.Value.fromUnsignedBigInt(amount),
      ethereum.Value.fromString(information)
    ]);

    return result[0].toBoolean();
  }

  try_send(
    target: Address,
    amount: BigInt,
    information: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("send", "send(address,uint256,string):(bool)", [
      ethereum.Value.fromAddress(target),
      ethereum.Value.fromUnsignedBigInt(amount),
      ethereum.Value.fromString(information)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getTransaction(
    transactionId: BigInt
  ): Treasury__getTransactionResultValue0Struct {
    let result = super.call(
      "getTransaction",
      "getTransaction(uint256):((address,address,bool,uint256,string))",
      [ethereum.Value.fromUnsignedBigInt(transactionId)]
    );

    return changetype<Treasury__getTransactionResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getTransaction(
    transactionId: BigInt
  ): ethereum.CallResult<Treasury__getTransactionResultValue0Struct> {
    let result = super.tryCall(
      "getTransaction",
      "getTransaction(uint256):((address,address,bool,uint256,string))",
      [ethereum.Value.fromUnsignedBigInt(transactionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Treasury__getTransactionResultValue0Struct>(value[0].toTuple())
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get daoToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get governance(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get information(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SendCall extends ethereum.Call {
  get inputs(): SendCall__Inputs {
    return new SendCall__Inputs(this);
  }

  get outputs(): SendCall__Outputs {
    return new SendCall__Outputs(this);
  }
}

export class SendCall__Inputs {
  _call: SendCall;

  constructor(call: SendCall) {
    this._call = call;
  }

  get target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get information(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class SendCall__Outputs {
  _call: SendCall;

  constructor(call: SendCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
