 type Member @entity {
  id: ID!
  token: Token! 
  acceptedBy: String!
  rCount: Int!
  eCount: Int!
  pCount: Int!
  vCount: Int!
  roles: [Role_Member!] @derivedFrom(field: "member")
	reputations: [Reputation!] @derivedFrom(field: "contributor")
	evaluatingLogs: [Reputation!] @derivedFrom(field: "evaluator")
	proposalSubmissionLogs: [Proposal!] @derivedFrom(field: "proposer")
	votingLogs: [Vote!] @derivedFrom(field: "voter")
}

type Token @entity {
  id: ID!
  owner: Member!
  uri: String!
}

type Reputation @entity {
	id: ID!
  domain: Role
	contributor: Member!
	evaluator: Member!
	reason: String
	evaluationRound: EvaluationRound
	timestamp: BigInt!
}

type Role @entity {
  id: ID!
  name: String
  adminRole: Role
  members: [Role_Member!] @derivedFrom(field: "role")
  allowance: BigInt
}

type Role_Member @entity {
  id: ID!
  member: Member!
  role: Role!
}


type EvaluationRound @entity {
	id: ID!
	startBlock: BigInt!
	endBlock: BigInt!
	reputations: [Reputation!] @derivedFrom(field: "evaluationRound")
}

type Proposal @entity {
	id: ID!
	proposer: Member!
	description: String!
	targets: [String!]!
	values: [BigInt!]!
	calldatas: [Bytes!]!
	startBlock: BigInt!
	endBlock: BigInt!
  Status: Int!
	forVotes: BigInt!
	againstVotes: BigInt!
	abstainVotes: BigInt!
	canceled: Boolean!
	executed: Boolean!
	votes: [Vote!] @derivedFrom(field: "proposal")
  timestamp: BigInt!
}

type Vote @entity {
	id: ID!
	voter: Member!
	proposal: Proposal!
	support: Int!
	weight: BigInt!
	reason: String
	timestamp: BigInt!
}

type Transaction @entity {
	id: ID!
  timestamp: BigInt!
	isIncoming: Boolean!
	srcOrDst: String!
	amount: BigInt!
	reference: String
}